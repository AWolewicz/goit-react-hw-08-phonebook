{"version":3,"file":"static/js/342.e25e3e70.chunk.js","mappings":"6PACA,EAAuB,0BAAvB,EAAyD,2BAAzD,EAA4F,2B,mBCO/EA,EAAc,WACzB,IAAMC,GAAcC,EAAAA,EAAAA,MACdC,GAAgBD,EAAAA,EAAAA,MAEhBE,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAmB7B,OACEC,EAAAA,EAAAA,MAAA,QAAMC,SAlBa,SAAAC,GACnBA,EAAIC,iBAEJ,IAAMC,EAAOF,EAAIG,cACXC,EAAOF,EAAK,GAAGG,MACfC,EAASJ,EAAK,GAAGG,MACJV,EAASY,MAAK,SAAAC,GAAO,OAAIA,EAAQJ,OAASA,CAAI,IAG/DK,MAAML,EAAO,4BAEbX,GAASiB,EAAAA,EAAAA,IAAW,CAAEN,KAAAA,EAAME,OAAAA,KAG9BJ,EAAKS,OACP,EAG+BC,SAAA,EAC3Bd,EAAAA,EAAAA,MAAA,OAAKe,UAAWC,EAASF,SAAA,EACvBG,EAAAA,EAAAA,KAAA,SAAOF,UAAWC,EAAWE,QAAS1B,EAAYsB,SAAC,UAGnDG,EAAAA,EAAAA,KAAA,SACEF,UAAWC,EACXG,KAAK,OACLb,KAAK,OACLc,GAAI5B,EACJ6B,QAAQ,6HACRC,MAAM,yIACNC,UAAQ,QAGZvB,EAAAA,EAAAA,MAAA,OAAKe,UAAWC,EAASF,SAAA,EACvBG,EAAAA,EAAAA,KAAA,SAAOF,UAAWC,EAAWE,QAASxB,EAAcoB,SAAC,YAGrDG,EAAAA,EAAAA,KAAA,SACEF,UAAWC,EACXG,KAAK,MACLb,KAAK,SACLc,GAAI1B,EACJ2B,QAAQ,4IACRC,MAAM,sFACNC,UAAQ,QAGZN,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACC,QAAQ,YAAYN,KAAK,SAAQL,SAAC,kBAKhD,E,UClEA,EAAwB,sBCIXY,EAAS,WACpB,IAAMC,GAAgBlC,EAAAA,EAAAA,MAChBE,GAAWC,EAAAA,EAAAA,MAOjB,OACEI,EAAAA,EAAAA,MAAA,OAAAc,SAAA,EACEG,EAAAA,EAAAA,KAAA,KAAAH,SAAG,2BACHG,EAAAA,EAAAA,KAAA,SACEF,UAAWC,EACXY,SAVe,SAAA1B,GACnB,IAAM2B,EAAS3B,EAAI4B,OAAOvB,MAC1BZ,GAASoC,EAAAA,EAAAA,GAAUF,GACrB,EAQMV,KAAK,OACLb,KAAK,SACLc,GAAIO,EACJN,QAAQ,6HACRC,MAAM,6IAId,ECxBaU,EAAU,SAAHC,GAAqB,IAAfvB,EAAOuB,EAAPvB,QAClBf,GAAWC,EAAAA,EAAAA,MAIjB,OACEI,EAAAA,EAAAA,MAAA,OAAAc,SAAA,EACEd,EAAAA,EAAAA,MAAA,OAAAc,SAAA,EACEG,EAAAA,EAAAA,KAAA,KAAAH,SAAIJ,EAAQJ,QACZW,EAAAA,EAAAA,KAAA,KAAAH,SAAIJ,EAAQwB,YAEdjB,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACC,QAAQ,WAAWU,MAAM,QAAQC,QAAS,kBAR3BzC,GAAS0C,EAAAA,EAAAA,IAAc3B,EAAQU,IAQgB,EAACN,SAAO,aAKpF,EChBawB,EAAc,SAAHL,GAAmB,IAAbM,EAAKN,EAALM,MACtBC,GAAkB1C,EAAAA,EAAAA,IAAY2C,EAAAA,IAEpC,OACEzC,EAAAA,EAAAA,MAAA,OAAAc,SAAA,CACGyB,IACCtB,EAAAA,EAAAA,KAAA,KAAAH,SAAG,0CAELG,EAAAA,EAAAA,KAAA,MAAAH,SACG0B,EAAgBE,KAAI,SAAAhC,GAAO,OAC1BO,EAAAA,EAAAA,KAAA,MAAAH,UACEG,EAAAA,EAAAA,KAACe,EAAO,CAACtB,QAASA,KADXA,EAAQU,GAEZ,QAKf,ECoBA,EA9BiB,WACb,IAAMzB,GAAWC,EAAAA,EAAAA,MACX+C,GAAY7C,EAAAA,EAAAA,IAAY8C,EAAAA,IACxBL,GAAQzC,EAAAA,EAAAA,IAAY+C,EAAAA,IAM1B,OAJAC,EAAAA,EAAAA,YAAU,WACNnD,GAASoD,EAAAA,EAAAA,MACb,GAAG,CAACpD,KAGAK,EAAAA,EAAAA,MAAA,QAAAc,SAAA,EACAd,EAAAA,EAAAA,MAACgD,EAAAA,GAAM,CAAAlC,SAAA,EACHG,EAAAA,EAAAA,KAAA,SAAAH,SAAO,cACPG,EAAAA,EAAAA,KAAA,QAAMX,KAAK,cAAc2C,QAAQ,qCACjChC,EAAAA,EAAAA,KAAA,QAAMX,KAAK,WAAW2C,QAAQ,iBAEjCN,IAAcJ,IAAStB,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,KAC/BlD,EAAAA,EAAAA,MAAA,OAAAc,SAAA,EACIG,EAAAA,EAAAA,KAAA,MAAAH,SAAI,eACJG,EAAAA,EAAAA,KAAC1B,EAAW,QAEhBS,EAAAA,EAAAA,MAAA,OAAAc,SAAA,EACIG,EAAAA,EAAAA,KAAA,MAAAH,SAAI,cACJG,EAAAA,EAAAA,KAACS,EAAM,QAEXT,EAAAA,EAAAA,KAACqB,EAAW,CAACC,MAAOA,MAG5B,C","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\"};","import { useSelector } from 'react-redux';\nimport { selectContacts } from '../redux/selectors';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../redux/operations';\nimport { nanoid } from '@reduxjs/toolkit';\nimport css from './ContactForm.module.css'\nimport Button from '@mui/material/Button';\n\nexport const ContactForm = () => {\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const form = evt.currentTarget;\n    const name = form[0].value;\n    const number = form[1].value;\n    const nameExists = contacts.some(contact => contact.name === name);\n\n    if (nameExists) {\n      alert(name + ' is already in contacts.');\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={css.form}>\n        <label className={css.label} htmlFor={nameInputId}>\n          Name\n        </label>\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          id={nameInputId}\n          pattern=\"^[a-zA-Zа-яА-Я]+((['\\s\\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n      <div className={css.form}>\n        <label className={css.label} htmlFor={numberInputId}>\n          Number\n        </label>\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          id={numberInputId}\n          pattern=\"^\\+((?:9[679]|8[035789]|6[789]|5[90]|42|3[578]|2[1-689])|9[0-58]|8[1246]|6[0-6]|5[1-8]|4[013-9]|3[0-469]|2[70]|7|1)(?:\\W*\\d){0,13}\\d$\"\n          title=\"Phone number must start with +, be at least 3 digits and can contain spaces, dashes\"\n          required\n        />\n      </div>\n      <Button variant=\"contained\" type=\"submit\">\n        Add contact\n      </Button>\n    </form>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\"};","import { useDispatch } from 'react-redux';\nimport { setFilter } from '../redux/filterSlice';\nimport { nanoid } from '@reduxjs/toolkit';\nimport css from './Filter.module.css'\n\nexport const Filter = () => {\n  const filterInputId = nanoid();\n  const dispatch = useDispatch();\n\n  const handleFilter = evt => {\n    const filter = evt.target.value;\n    dispatch(setFilter(filter));\n  };\n\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input\n        className={css.input}\n        onChange={handleFilter}\n        type=\"text\"\n        name=\"filter\"\n        id={filterInputId}\n        pattern=\"^[a-zA-Zа-яА-Я]+((['\\s\\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      />\n    </div>\n  );\n};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from '../redux/operations';\nimport Button from '@mui/material/Button';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <div>\n      <div>\n        <p>{contact.name}</p>\n        <p>{contact.phone}</p>\n      </div>\n      <Button variant=\"outlined\" color=\"error\" onClick={() => handleDelete()}      >\n        Delete\n      </Button>\n    </div>\n  );\n};","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../redux/selectors';\nimport { Contact } from '../Contact/Contact';\n\nexport const ContactList = ({ error }) => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <div>\n      {error && (\n        <p>Failed to fetch data from the server</p>\n      )}\n      <ul>\n        {visibleContacts.map(contact => (\n          <li key={contact.id}>\n            <Contact contact={contact} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport { selectIsLoading, selectError } from '../redux/selectors';\nimport { Loader } from '../Loader/Loader';\nimport { ContactForm } from '../ContactForm/ContactForm';\nimport { Filter } from '../Filter/Filter';\nimport { ContactList } from '../ContactList/ContactList';\nimport { fetchContacts } from '../redux/operations';\n\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <main>\n        <Helmet>\n            <title>Contacts</title>\n            <meta name=\"description\" content=\"Contacts page of the phonebook.\"/>\n            <meta name=\"keywords\" content=\"phonebook\"/>\n        </Helmet>\n        {isLoading && !error && <Loader />}\n        <div>\n            <h2>Phonebook</h2>\n            <ContactForm />\n        </div>\n        <div>\n            <h3>Contacts</h3>\n            <Filter />\n        </div>\n        <ContactList error={error} />\n        </main>\n    );\n};\n\nexport default Contacts;"],"names":["ContactForm","nameInputId","nanoid","numberInputId","dispatch","useDispatch","contacts","useSelector","selectContacts","_jsxs","onSubmit","evt","preventDefault","form","currentTarget","name","value","number","some","contact","alert","addContact","reset","children","className","css","_jsx","htmlFor","type","id","pattern","title","required","Button","variant","Filter","filterInputId","onChange","filter","target","setFilter","Contact","_ref","phone","color","onClick","deleteContact","ContactList","error","visibleContacts","selectVisibleContacts","map","isLoading","selectIsLoading","selectError","useEffect","fetchContacts","Helmet","content","Loader"],"sourceRoot":""}